{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lawrence\\\\CORD-19\\\\frontend\\\\src\\\\Components\\\\BodyText.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Collapsible from \"react-collapsible\"; //bio tag for each word in body text\n\nconst bio_tag = (i, j, keys, tag_dict, tag_list) => {\n  const to_check = `${i},${j}`;\n\n  if (keys.indexOf(to_check) > -1 && tag_list.includes(tag_dict[to_check])) {\n    return tag_dict[to_check];\n  }\n\n  return;\n};\n\nconst highlight_tag_in_text = (text, textIndex, keys, tag_dict, tag_list) => {\n  return text.split(\" \").map((word, j) => (key = {\n    j\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: bio_tag(textIndex, j, keys, tag_dict, tag_list),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }\n  }, word + \" \")));\n};\n\nconst create_text_from_header = (header, keys, tag_dict, bodyText, unique_section_header_to_body, tag_list) => {\n  return /*#__PURE__*/React.createElement(Collapsible, {\n    trigger: header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, unique_section_header_to_body[header].map((position, i) => /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, highlight_tag_in_text(bodyText.text[position], i, keys, tag_dict, tag_list))));\n};\n\nconst BodyText = ({\n  bodyText,\n  sectionHeaderType,\n  tag_list\n}) => {\n  const tags = bodyText.tags;\n  const tag_dict = tags.sciwingI2B2;\n  const keys = Object.keys(tag_dict);\n  const section_headers = bodyText.section_header[sectionHeaderType];\n  var unique_section_header_to_body = {};\n\n  for (let i = 0; i < section_headers.length; i++) {\n    var sh = section_headers[i];\n\n    if (sh === \"\") {\n      sh = \"No Section Header for this section\";\n    }\n\n    if (!(sh in unique_section_header_to_body)) {\n      unique_section_header_to_body[sh] = [i];\n    } else {\n      unique_section_header_to_body[sh].push(i);\n    }\n  }\n\n  const unique_headers = Object.keys(unique_section_header_to_body);\n  const result = unique_headers.map((header, i) => {\n    return create_text_from_header(header, keys, tag_dict, bodyText, unique_section_header_to_body, tag_list);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main_answer_list_title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Body Text\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Sciwing I2B2:\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"problem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \" \\xA0\\xA0Problem\\xA0\\xA0\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"test\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \" Test\\xA0\\xA0\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"treatment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \" Treatment \\xA0\\xA0\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, result));\n};\n\nexport default BodyText;","map":{"version":3,"sources":["C:/Users/lawrence/CORD-19/frontend/src/Components/BodyText.js"],"names":["React","useState","useEffect","Collapsible","bio_tag","i","j","keys","tag_dict","tag_list","to_check","indexOf","includes","highlight_tag_in_text","text","textIndex","split","map","word","key","create_text_from_header","header","bodyText","unique_section_header_to_body","position","BodyText","sectionHeaderType","tags","sciwingI2B2","Object","section_headers","section_header","length","sh","push","unique_headers","result"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Collapsible from \"react-collapsible\";\r\n\r\n//bio tag for each word in body text\r\nconst bio_tag = (i, j, keys, tag_dict, tag_list) => {\r\n  const to_check = `${i},${j}`;\r\n  if (keys.indexOf(to_check) > -1 && tag_list.includes(tag_dict[to_check])) {\r\n    return tag_dict[to_check];\r\n  }\r\n  return;\r\n};\r\n\r\nconst highlight_tag_in_text = (text, textIndex, keys, tag_dict, tag_list) => {\r\n  return text\r\n    .split(\" \")\r\n    .map(\r\n      (word, j) => (\r\n        (key = { j }),\r\n        (\r\n          <span className={bio_tag(textIndex, j, keys, tag_dict, tag_list)}>\r\n            {word + \" \"}\r\n          </span>\r\n        )\r\n      )\r\n    );\r\n};\r\n\r\nconst create_text_from_header = (\r\n  header,\r\n  keys,\r\n  tag_dict,\r\n  bodyText,\r\n  unique_section_header_to_body,\r\n  tag_list\r\n) => {\r\n  return (\r\n    <Collapsible trigger={header}>\r\n      {unique_section_header_to_body[header].map((position, i) => (\r\n        <p>\r\n          {highlight_tag_in_text(\r\n            bodyText.text[position],\r\n            i,\r\n            keys,\r\n            tag_dict,\r\n            tag_list\r\n          )}\r\n        </p>\r\n      ))}\r\n    </Collapsible>\r\n  );\r\n};\r\n\r\nconst BodyText = ({ bodyText, sectionHeaderType, tag_list }) => {\r\n  const tags = bodyText.tags;\r\n  const tag_dict = tags.sciwingI2B2;\r\n  const keys = Object.keys(tag_dict);\r\n\r\n  const section_headers = bodyText.section_header[sectionHeaderType];\r\n\r\n  var unique_section_header_to_body = {};\r\n  for (let i = 0; i < section_headers.length; i++) {\r\n    var sh = section_headers[i];\r\n    if (sh === \"\") {\r\n      sh = \"No Section Header for this section\";\r\n    }\r\n    if (!(sh in unique_section_header_to_body)) {\r\n      unique_section_header_to_body[sh] = [i];\r\n    } else {\r\n      unique_section_header_to_body[sh].push(i);\r\n    }\r\n  }\r\n\r\n  const unique_headers = Object.keys(unique_section_header_to_body);\r\n  const result = unique_headers.map((header, i) => {\r\n    return create_text_from_header(\r\n      header,\r\n      keys,\r\n      tag_dict,\r\n      bodyText,\r\n      unique_section_header_to_body,\r\n      tag_list\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"answer-list\">\r\n      <div className=\"main_answer_list_title\">\r\n        <h3>Body Text</h3>\r\n        <div>\r\n          Sciwing I2B2:\r\n          <span className=\"problem\"> &nbsp;&nbsp;Problem&nbsp;&nbsp;</span>\r\n          <span className=\"test\"> Test&nbsp;&nbsp;</span>\r\n          <span className=\"treatment\"> Treatment &nbsp;&nbsp;</span>\r\n          <br />\r\n        </div>\r\n      </div>\r\n      <div>{result}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BodyText;\r\n"]},"metadata":{},"sourceType":"module"}