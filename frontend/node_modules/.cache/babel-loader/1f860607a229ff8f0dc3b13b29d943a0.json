{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport assign from 'object-assign';\n\nvar CoreDispatcher = function () {\n  function CoreDispatcher() {\n    _classCallCheck(this, CoreDispatcher);\n\n    this.eventMap = {};\n    this.destroyed = false;\n  }\n\n  CoreDispatcher.prototype.on = function on(eventName, handler) {\n    var listeners = this.getListener(eventName);\n\n    if (listeners.indexOf(handler) === -1) {\n      listeners.push(handler);\n    }\n\n    this.eventMap[eventName] = this.eventMap[eventName] || listeners;\n    return this;\n  };\n\n  CoreDispatcher.prototype.once = function once(eventName, handler) {\n    var _this = this;\n\n    var f2 = function f2(e) {\n      handler(e);\n\n      _this.off(eventName, f2);\n    };\n\n    return this.on(eventName, f2);\n  };\n\n  CoreDispatcher.prototype.off = function off(eventName, handler) {\n    var listeners = this.getListener(eventName);\n\n    if (!handler) {\n      this.eventMap[eventName].length = 0;\n      delete this.eventMap[eventName];\n    } else {\n      var i = listeners.indexOf(handler);\n\n      if (i > -1) {\n        listeners.splice(i, 1);\n\n        if (!listeners.length) {\n          delete this.eventMap[eventName];\n        }\n      }\n    }\n\n    return this;\n  };\n\n  CoreDispatcher.prototype.commitEvent = function commitEvent(listeners, eventObject) {\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      if (listeners[i]) {\n        listeners[i](eventObject);\n      } else if (console) {\n        console.warn('listener undefined', i);\n      }\n    }\n\n    return this;\n  };\n\n  CoreDispatcher.prototype.commitEvents = function commitEvents(listeners, eventObjects) {\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      if (listeners[i]) {\n        for (var ii = 0, ll = eventObjects.length; ii < ll; ii++) {\n          listeners[i](eventObjects[ii]);\n        }\n      } else if (console) {\n        console.warn('listener undefined', i);\n      }\n    }\n\n    return this;\n  };\n\n  CoreDispatcher.prototype.createEventObject = function createEventObject(eventType, eventObject) {\n    var evtObj = {\n      type: eventType,\n      target: this\n    };\n\n    if (eventObject) {\n      evtObj = assign(evtObj, eventObject);\n    }\n\n    return evtObj;\n  };\n\n  CoreDispatcher.prototype.triggerSync = function triggerSync(eventObjects) {\n    var listenerCollection = [];\n\n    for (var i = 0, l = eventObjects.length; i < l; i++) {\n      var listeners = this.getListener(eventObjects[i].type);\n\n      for (var ii = 0, ll = listeners.length; ii < ll; ii++) {\n        var listener = listeners[ii];\n\n        if (listenerCollection.indexOf(listener) < 0) {\n          listenerCollection.push(listener);\n        }\n      }\n    }\n  };\n\n  CoreDispatcher.prototype.trigger = function trigger(eventType, eventObject) {\n    var listeners = this.getListener(eventType);\n\n    if (listeners && listeners.length) {\n      return this.commitEvent(listeners, this.createEventObject(eventType, eventObject));\n    }\n\n    return this;\n  };\n\n  CoreDispatcher.prototype.clear = function clear() {\n    if (this.eventMap) {\n      var keys = Object.keys(this.eventMap);\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        this.eventMap[keys[i]].length = 0;\n        delete this.eventMap[keys[i]];\n      }\n    }\n  };\n\n  CoreDispatcher.prototype.getListener = function getListener(eventName) {\n    return !!this.eventMap && this.eventMap[eventName] ? this.eventMap[eventName] : [];\n  };\n\n  CoreDispatcher.prototype.destroy = function destroy() {\n    this.clear();\n    this.eventMap = null;\n    this.destroyed = true;\n    return this;\n  };\n\n  return CoreDispatcher;\n}();\n\nexport { CoreDispatcher as default };","map":{"version":3,"sources":["C:/Users/lawrence/CORD-19/frontend/node_modules/eventdispatcher/es/core.js"],"names":["_classCallCheck","assign","CoreDispatcher","eventMap","destroyed","prototype","on","eventName","handler","listeners","getListener","indexOf","push","once","_this","f2","e","off","length","i","splice","commitEvent","eventObject","l","console","warn","commitEvents","eventObjects","ii","ll","createEventObject","eventType","evtObj","type","target","triggerSync","listenerCollection","listener","trigger","clear","keys","Object","destroy","default"],"mappings":"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","sourcesContent":["import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport assign from 'object-assign';\n\nvar CoreDispatcher = function () {\n  function CoreDispatcher() {\n    _classCallCheck(this, CoreDispatcher);\n\n    this.eventMap = {};\n    this.destroyed = false;\n  }\n\n  CoreDispatcher.prototype.on = function on(eventName, handler) {\n    var listeners = this.getListener(eventName);\n    if (listeners.indexOf(handler) === -1) {\n      listeners.push(handler);\n    }\n    this.eventMap[eventName] = this.eventMap[eventName] || listeners;\n    return this;\n  };\n\n  CoreDispatcher.prototype.once = function once(eventName, handler) {\n    var _this = this;\n\n    var f2 = function f2(e) {\n      handler(e);\n      _this.off(eventName, f2);\n    };\n    return this.on(eventName, f2);\n  };\n\n  CoreDispatcher.prototype.off = function off(eventName, handler) {\n    var listeners = this.getListener(eventName);\n    if (!handler) {\n      this.eventMap[eventName].length = 0;\n      delete this.eventMap[eventName];\n    } else {\n      var i = listeners.indexOf(handler);\n      if (i > -1) {\n        listeners.splice(i, 1);\n        if (!listeners.length) {\n          delete this.eventMap[eventName];\n        }\n      }\n    }\n    return this;\n  };\n\n  CoreDispatcher.prototype.commitEvent = function commitEvent(listeners, eventObject) {\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      if (listeners[i]) {\n        listeners[i](eventObject);\n      } else if (console) {\n        console.warn('listener undefined', i);\n      }\n    }\n    return this;\n  };\n\n  CoreDispatcher.prototype.commitEvents = function commitEvents(listeners, eventObjects) {\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      if (listeners[i]) {\n        for (var ii = 0, ll = eventObjects.length; ii < ll; ii++) {\n          listeners[i](eventObjects[ii]);\n        }\n      } else if (console) {\n        console.warn('listener undefined', i);\n      }\n    }\n    return this;\n  };\n\n  CoreDispatcher.prototype.createEventObject = function createEventObject(eventType, eventObject) {\n    var evtObj = {\n      type: eventType,\n      target: this\n    };\n\n    if (eventObject) {\n      evtObj = assign(evtObj, eventObject);\n    }\n\n    return evtObj;\n  };\n\n  CoreDispatcher.prototype.triggerSync = function triggerSync(eventObjects) {\n    var listenerCollection = [];\n    for (var i = 0, l = eventObjects.length; i < l; i++) {\n      var listeners = this.getListener(eventObjects[i].type);\n      for (var ii = 0, ll = listeners.length; ii < ll; ii++) {\n        var listener = listeners[ii];\n        if (listenerCollection.indexOf(listener) < 0) {\n          listenerCollection.push(listener);\n        }\n      }\n    }\n  };\n\n  CoreDispatcher.prototype.trigger = function trigger(eventType, eventObject) {\n    var listeners = this.getListener(eventType);\n    if (listeners && listeners.length) {\n      return this.commitEvent(listeners, this.createEventObject(eventType, eventObject));\n    }\n    return this;\n  };\n\n  CoreDispatcher.prototype.clear = function clear() {\n    if (this.eventMap) {\n      var keys = Object.keys(this.eventMap);\n      for (var i = 0, l = keys.length; i < l; i++) {\n        this.eventMap[keys[i]].length = 0;\n        delete this.eventMap[keys[i]];\n      }\n    }\n  };\n\n  CoreDispatcher.prototype.getListener = function getListener(eventName) {\n    return !!this.eventMap && this.eventMap[eventName] ? this.eventMap[eventName] : [];\n  };\n\n  CoreDispatcher.prototype.destroy = function destroy() {\n    this.clear();\n    this.eventMap = null;\n    this.destroyed = true;\n    return this;\n  };\n\n  return CoreDispatcher;\n}();\n\nexport { CoreDispatcher as default };"]},"metadata":{},"sourceType":"module"}